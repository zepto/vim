" File: .vimrc
" Author: Josiah Gordon
" Last Modified: March 14, 2016
" License:  The MIT License {{{
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
"
" The above copyright notice and this permission notice shall be included in
" all copies or substantial portions of the Software.
"
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
" THE SOFTWARE.
" }}}

" Initialize."{{{
" Macros and other options that need to go first."{{{
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
if &compatible
    set nocompatible
endif

" Load shell menu for shellscripts
runtime! macros/shellmenu.vim

" Load extended matching with '%'
runtime! macros/matchit.vim
runtime! macros/editexisting.vim
"}}}

" Set global variables"{{{

" Set leader
let maplocalleader = ";"
let mapleader = ","

" Make vim more posix compliant.
let g:is_posix=1

" End global variables"}}}

" Initial settings."{{{
" Encoding settings."{{{
set encoding=utf-8
set fileencoding=utf-8

" Reference: https://github.com/Shougo/config/blob/master/vimrc
if $ENV_ACCESS ==# 'linux'
    set termencoding=euc-jp
elseif $ENV_ACCESS ==# 'colinux'
    set termencoding=utf-8
else  " fallback
    set termencoding=  " same as 'encoding'
endif
set fileencodings=utf-8,iso-2022-jp-3,eucjp-ms,ucs-bom,cp932,default,latin1,cp1253
" }}}

" Fileformat settings."{{{
set fileformat=unix
" Detect other fileformats.
set fileformats=unix,dos,mac
" }}}
" }}}
" }}}

" Load plugins."{{{

" Initialize the plugin manager."{{{

" Turn off filetype detection (for plugin manager)
filetype plugin indent off

if has('vim_starting')
    " Initialize neobundle
    set rtp+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle'))
" }}}

" Load neobundle"{{{
NeoBundleFetch 'Shougo/neobundle.vim'
"}}}

" Vim related plugins"{{{
NeoBundle 'kana/vim-submode'
NeoBundle 'kana/vim-arpeggio'
NeoBundle 'kana/vim-smartchr'
NeoBundle 'kana/vim-altercmd'
NeoBundle 'kana/vim-skeleton'
NeoBundle 'kana/vim-gf-user'
NeoBundle 'kana/vim-gf-diff'
NeoBundle 'Shougo/vimproc', {'do': 'make'}
NeoBundle 'ujihisa/nclipper.vim'
NeoBundle 'tyru/DumbBuf.vim'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'sickill/vim-pasta'
NeoBundle 'vim-scripts/autodate.vim'
NeoBundle 'maxbrunsfeld/vim-yankstack'
NeoBundle 'godlygeek/tabular'
NeoBundle 'airblade/vim-gitgutter'
"}}}

" Unite plugins"{{{
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'ujihisa/unite-locate'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'ujihisa/quicklearn'
NeoBundle 't9md/vim-unite-ack'
NeoBundle 'sgur/unite-qf'
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'tacroe/unite-mark'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'soh335/unite-qflist'
NeoBundle 'natsumesou/unite-flexmatcher'
NeoBundle "zepto/unite-tmux"
" }}}

" neocomplcache completion."{{{
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'ujihisa/neco-look'
"}}}

" Surround and surround like plugins."{{{
NeoBundle 'tpope/vim-surround'
NeoBundle 't9md/vim-surround_custom_mapping'
" }}}

" File related plugins"{{{
NeoBundle 'Shougo/vimfiler'
"}}}

" Editing related plugins"{{{
NeoBundle 'kana/vim-smartword'
NeoBundle 'kana/vim-grex'
NeoBundle 'thinca/vim-qfreplace'
NeoBundle 'thinca/vim-visualstar'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'vim-scripts/Rainbow-Parentheses-Improved-and2'
NeoBundle 'vim-scripts/camelcasemotion'
"}}}

" Programming related plugins"{{{
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tyru/caw.vim'
NeoBundle 'c9s/cascading.vim'
"}}}

" Git plugin"{{{
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mattn/gist-vim'
"}}}

call neobundle#end()

" End plugin loading"}}}

" Turn filtype settings and syntax back on."{{{
" Turn on filetype detection and other options.
filetype plugin indent on

" Turn on syntax before setting the colors otherwise they will be unset.
syntax on

" Check for and prompt to install uninstalled plugins.
NeoBundleCheck
" }}}

" Keybindings"{{{

" Misc."{{{
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Toggle showing list chars
noremap <leader>l :set invlist<CR>

" Save file if it has changes.
noremap <leader>x :update<CR>

" Re-source vimrc
noremap <leader>sv :source $MYVIMRC<CR>

" Edit vimrc
noremap <leader>ev :tabe $MYVIMRC<CR>

" Tmux shortcuts."{{{
noremap <leader>tp :TmuxSelectPane<CR>
noremap <leader>tt :TmuxSendCommand<CR>
noremap <leader>cc :TmuxChangeCommand<CR>

nnoremap <leader>ts :TmuxSend<CR>
nnoremap <leader>tsa :1,$TmuxSend<CR>
xnoremap <leader>ts :TmuxSend<CR>
" }}}
"}}}

" Moving in insert mode."{{{
" Reference: https://github.com/kana/config/blob/master/vim/personal/dot.vimrc
" inoremap <Esc>h  <Left>
" inoremap <Esc>j  <Down>
" inoremap <Esc>k  <Up>
" inoremap <Esc>l  <Right>

inoremap <Esc>w  <C-Right>
inoremap <Esc>b  <C-Left>
inoremap <Esc>e  <C-o>e
inoremap <Esc>W  <C-o>W
inoremap <Esc>B  <C-o>B
inoremap <Esc>E  <C-o>E
" }}}

" Diff keybindings."{{{
vnoremap <leader>dp :diffput<CR>
vnoremap <leader>do :diffget<CR>
" }}}

" Encrypt the current file with vimcrypt."{{{
noremap <leader>cr :X<CR>
"}}}

" Toggle the colorcolumn shortcut."{{{
let s:l_cc = &cc
fun! s:ToggleColorColumn()
    if s:l_cc == 0
        setlocal colorcolumn=+1
        let s:l_cc = 1
    else
        setlocal colorcolumn=0
        let s:l_cc = 0
    endif
endfun
noremap <leader><leader>c :call <SID>ToggleColorColumn()<CR>
" }}}

" Turn off the highlighting (nohl) shortcut."{{{
nnoremap <leader>/ :nohl<CR>
" }}}

" Quick spell check toggle."{{{
noremap <leader>ss :setlocal spell!<CR>
"}}}

" Window and Tab movement keys."{{{
" Tab related shortcuts.
noremap <leader>tc :tabclose<CR>
noremap <leader>wt <C-W>T

" Switch windows quickly
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h
"}}}

" Close current window."{{{
noremap <leader>q :quit!<CR>
"}}}

" Open and close the list window."{{{
noremap <leader>lo :lopen<CR>
noremap <leader>lc :lclose<CR>
" }}}

" Visual star search keybindings."{{{
" Reference: https://github.com/ujihisa/config/blob/master/_vimrc#L1494
" vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>")
"}}}

" Vim command line keybindings."{{{
cmap <C-A> <Home>
cmap <C-E> <End>
cmap <C-D> <Del>
cmap <C-B> <Left>
cmap <C-F> <Right>
"}}}

" Golden Ratio resize."{{{
" Reference: https://github.com/ujihisa/config/blob/master/_vimrc#L1494
command! -nargs=0 GoldenRatioVirtical execute 'vertical resize' &columns * 5/8
command! -nargs=0 GoldenRatio execute 'resize' &lines * 5/8
nnoremap <leader>rv :<C-u> GoldenRatioVirtical<CR>
nnoremap <leader>rh :<C-u> GoldenRatio<CR>
"}}}

" Plugin keybindings."{{{

" Neocomplcache keybindings"{{{
" Check if neocomplcache is loaded.
if &rtp=~'neocomplcache'
    inoremap <expr><C-d>l neocomplcache#toggle_lock()."\<C-h>"
    imap <silent><C-l>     <Plug>(neosnippet_expand_or_jump)
    smap <silent><C-l>     <Plug>(neosnippet_expand_or_jump)
    " smap <silent><C-l>     <Plug>(neocomplcache_snippets_jump)
    "inoremap <silent>G     <Plug>(neocomplcache_snippets_force_expand)
    "inoremap <expr><C-j> neocomplcache#sources#snippets_complete#expandable() ?
    "\ "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "\<CR>"
    " <TAB>: completion.
    " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplcache#close_popup()
    inoremap <expr><C-e>  neocomplcache#cancel_popup()

    " For cursor moving in insert mode(Not recommended)
    inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
    inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
    inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
    inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
endif
"}}}

" Unite keybindings."{{{
" The prefix key.
if &rtp=~'unite'
    nnoremap    [unite]   <nop>
    xnoremap    [unite]   <nop>
    nmap    <leader>u [unite]
    xmap    <leader>u [unite]

    nnoremap <silent> [unite]f  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
    nnoremap <silent> [unite]fb  :<C-u>UniteWithBufferDir -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
    nnoremap <silent> [unite]b  :<C-u>Unite -buffer-name=buffers buffer<CR>
    nnoremap <silent> [unite]r  :<C-u>Unite -buffer-name=register register<CR>
    nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>

    nnoremap  [unite]s  :<C-u>Unite source<CR>

    nnoremap <silent> [unite]h :<C-u>Unite help<CR>

    nnoremap [unite]i :<C-u>Unite neobundle/install:

    nnoremap [unite]a :<C-u>exe "Unite -buffer-name=ack ack:".expand("%:h")<CR>
    nnoremap [unite]a* :<C-u>exe "Unite -buffer-name=ack ack:".expand("%:h").":".escape(expand('<cword>'),' :\')<CR>
    xnoremap <space>a "vy :exe "Unite -buffer-name=ack ack:".expand("%:h").":".escape(@v,' :\')<CR>
    nnoremap [unite]A :<C-u>UniteResume ack<CR>

    nnoremap [unite]g :<C-u>exe "Unite -buffer-name=grep grep:".expand("%:h")<CR>
    nnoremap [unite]G :<C-u>UniteResume grep<CR>

    nnoremap [unite]rm :<C-u>exe "Unite -buffer-name=ref-man ref/man"<CR>

    " nnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux tmux"<CR>
    " nnoremap [unite]tsa :<C-u>exe "Unite -buffer-name=tmux tmux::0:$"<CR>
    " xnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux tmux::'<:'>"<CR>
    nnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux -default-action=send tmux/panes"<CR>
    nnoremap [unite]tsa :<C-u>exe "Unite -buffer-name=tmux -default-action=send tmux/panes::0:$"<CR>
    xnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux -default-action=send tmux/panes::'<:'>"<CR>
endif
" }}}

" VimFiler keybindings."{{{
if &rtp=~'vimfiler'
    noremap <leader>vf :VimFiler -buffer-name=explorer -split -winwidth=35 -toggle<CR>
endif
" }}}

" Arpeggio keybindings."{{{
if &rtp=~'vim-arpeggio'
    call arpeggio#map('i', '', 0, 'jk', '<Esc>')
    call arpeggio#map('v', '', 0, 'jk', '<Esc>')
endif
" }}}

" Smartword keybindings"{{{
if &rtp=~'vim-smartword'
    map w  <Plug>(smartword-w)
    map b  <Plug>(smartword-b)
    map e  <Plug>(smartword-e)
    map ge  <Plug>(smartword-ge)
    noremap ,w  w
    noremap ,b  b
    noremap ,e  e
    noremap ,ge  ge
endif
" }}}

" Gundo keybindings."{{{
if &rtp=~'gundo'
    noremap <leader>g :GundoToggle<CR>
endif
" }}}

" TagBar keybindings."{{{
if &rtp=~'tagbar'
    noremap <leader>tb :TagbarToggle<CR>
endif
" }}}

" Yankstack keybindings."{{{
if &rtp=~'vim-yankstack'
    nmap <C-P> <Plug>yankstack_substitute_older_paste
    nmap <C-N> <Plug>yankstack_substitute_newer_paste
endif
" }}}

" IndentGuides keybindings."{{{
if &rtp=~'vim-indent-guides'
    noremap <leader><leader>i :IndentGuidesToggle<CR>
endif
"}}}

" Caw commenter plugin settings."{{{
if &rtp=~'caw.vim'
    map <Plug>(caw:prefix)<Space> <Plug>(caw:i:toggle)
endif
" }}}

" Submodes and submode options."{{{
" Make sure submode is loaded.
if &rtp=~'vim-submode'
    " Textmanip submode"{{{
    " Reference: https://github.com/tsukkee/config/blob/master/vimrc
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>h', '<Plug>(textmanip-move-left)')
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>l', '<Plug>(textmanip-move-right)')
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>j', '<Plug>(textmanip-move-down)')
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>k', '<Plug>(textmanip-move-up)')
    call submode#leave_with('textmanip', 'v', '', '<Esc>')
    call submode#map('textmanip', 'v', 'r', 'h', '<Plug>(textmanip-move-left)')
    call submode#map('textmanip', 'v', 'r', 'l', '<Plug>(textmanip-move-right)')
    call submode#map('textmanip', 'v', 'r', 'j', '<Plug>(textmanip-move-down)')
    call submode#map('textmanip', 'v', 'r', 'k', '<Plug>(textmanip-move-up)')
    "}}}

    " Tab switching submode."{{{
    " Reference: http://www.github.com/choplin vimrc
    " call submode#enter_with('tabnext', 'n', '', '<Tab>', ':<C-u>tabnext<CR>')
    call submode#enter_with('tabnext', 'n', '', 'gt', ':<C-u>tabnext<CR>')
    " call submode#enter_with('tabnext', 'n', '', '<S-Tab>', ':<C-u>tabprevious<CR>')
    call submode#enter_with('tabnext', 'n', '', 'gT', ':<C-u>tabprevious<CR>')
    call submode#leave_with('tabnext', 'n', '', '<Esc>')
    call submode#map('tabnext', 'n', '', 'l', ':<C-u>tabnext<CR>')
    call submode#map('tabnext', 'n', '', 'h', ':<C-u>tabprevious<CR>')
    " }}}

    " Undo/Redo submode."{{{
    call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
    call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
    call submode#leave_with('undo/redo', 'n', '', '<Esc>')
    call submode#map('undo/redo', 'n', '', '-', 'g-')
    call submode#map('undo/redo', 'n', '', '+', 'g+')
    " }}}

    " Window resize submode."{{{
    " Reference: https://github.com/tsukkee/config/blob/master/vimrc
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
    " }}}
endif
" }}}

" end plugin keybindings }}}
"}}}

" Autocommands and filetype settings."{{{

" all files.{{{
augroup all_filetypes
    autocmd!
    " Reference: http://stackoverflow.com/questions/2182427/right-margin-in-vim
    " autocmd BufWinEnter <buffer> if empty(&buftype) && &l:textwidth > 0 |
    "             \ call matchadd('ErrorMsg', '\%>'.&l:textwidth.'v.\+', -1) |
    "             \ endif
    autocmd FileType python if &l:textwidth > 0 |
                \ call matchadd('ErrorMsg', '\%>'.&l:textwidth.'v.\+', -1) |
                \ endif
    " autocmd BufWinEnter * if &filetype == 'unite' | setlocal nowrap | endif
    " Reference: http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
    " Don't screw up folds when inserting text that might affect them, until
    " leaving insert mode. Foldmethod is local to the window.
    autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
    autocmd InsertLeave * let &l:foldmethod=w:last_fdm

    " Reference: vimrc_example.vim
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

    autocmd FileType * setlocal formatoptions-=t |
                \ setlocal formatoptions-=r |
                \ setlocal formatoptions-=o |
                \ setlocal formatoptions+=cmM

    " Statusline coloring."{{{
    " Reference: http://vim.wikia.com/wiki/Change_statusline_color_to_show_insert_or_normal_mode
    function! InsertStatuslineColor(mode)
        if  a:mode == 'r'
            hi statusline ctermbg=darkred guibg=#DE6951
        elseif a:mode == 'i'
            hi statusline ctermbg=darkblue guibg=#2187F6
        endif
    endfunction

    au InsertEnter * call InsertStatuslineColor(v:insertmode)
    au InsertLeave * hi statusline ctermbg=darkcyan guibg=#4390B1
    " }}}
augroup END
" }}}

" Vim Help."{{{
augroup vim_help_filetype
    autocmd!
    autocmd Filetype help noremap <buffer> q <C-W>q
augroup END
"}}}

" vim"{{{
augroup vim_filetype
    autocmd!
    autocmd FileType vim setlocal keywordprg=:help
augroup END
"}}}

" tmux.conf"{{{
augroup tmux_filetype
    autocmd!
    autocmd FileType tmux setlocal commentstring=#%s
augroup END
" }}}

" text."{{{
augroup text_filetype
    autocmd!
    " Set the vim dictionary
    au Filetype text setlocal dictionary+=/usr/share/dict/words

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78
augroup END
" }}}

" PKGBUILD"{{{
augroup PKGBUILD_filetype
    autocmd!
    autocmd FileType PKGBUILD setlocal commentstring=#%s
augroup END
"}}}

"}}}

" Options."{{{

" Plugin options"{{{

" Altercmd."{{{
" Load altercmd.
if &rtp=~'vim-altercmd'
    call altercmd#load()
endif
" }}}

" NeoComplCache settings"{{{
if &rtp=~'neocomplcache'
    " NeoComplCache options."{{{
    " Use neocomplcache#
    let g:neocomplcache_enable_at_startup = 1
    " let g:neocomplcache_disable_auto_complete = 1
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Use camel case completion.
    let g:neocomplcache_enable_camel_case_completion = 1
    " Use underbar completion.
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_auto_delimiter = 1
    " Set minimum syntax keyword length.
    let g:neocomplcache_min_syntax_length = 3
    " Make it auto select the first item.
    let g:neocomplcache_enable_auto_select = 0
    " let g:neocomplcache_ctags_program = 'anjuta-tags'
    let g:neocomplcache_ctags_program = 'ctags'
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate-snippets/snippets/'
    let g:neocomplcache_force_overwrite_completefunc = 1
    " }}}

    " Define dictionary."{{{
    let g:neocomplcache_dictionary_filetype_lists = {
        \ 'default' : '',
        \ }
    " \ 'python'  : $HOME . '/.vim/bundle/pydiction/complete-dict',
    if !exists('g:neocomplcache_dictionary_patterns')
    let g:neocomplcache_dictionary_patterns = {}
    endif
    " works well for the pydiction.vim dictionary file(complete-dict)
    " let g:neocomplcache_dictionary_patterns.python = '\(\h\w*[.(]\?\)\+'
    " }}}

    " Define omni functions dictionary."{{{
    let g:neocomplcache_omni_functions = {
                \ 'javascript' : 'javascriptcomplete#Complete',
                \ 'java'       : 'javacomplete#Complete',
                \ 'go'         : 'gocomplete#Complete',
                \ 'perl'       : 'PerlComplete',
                \ 'ada'        : 'adacomplete#Complete',
                \ }
    "}}}

    " Enable heavy omni completion."{{{
    if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.java = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.perl = '[^. *\t]->\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
    let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.go = '[^. *\t]\.\w*\|\h\w*::'
    "}}}

    " use neocomplcache & clang_complete."{{{

    " add neocomplcache option

    " add clang_complete option
    let g:neocomplcache_clang_use_library = 1
    let g:neocomplcache_clang_library_path='/usr/lib/llvm/'
    " let g:neocomplcache_clang_user_options =
    " \ '-I /usr/include '.
    " \ '-fms-extensions -fgnu-runtime '.
    " \ '-include malloc.h '

    " let g:clang_complete_auto=1
    " let g:clang_use_library = 1
    " let g:clang_library_path='/usr/lib/llvm/'
    " let g:clang_auto_select = 1
    " }}}
endif
"}}}

" Unite settings."{{{
" Start insert.
let g:unite_enable_start_insert = 0
let g:unite_split_rule = "botright"

" For ack."{{{
if executable('ack')
  let g:unite_source_grep_command = 'ack'
  let g:unite_source_grep_default_opts = '--noheading --nocolor -a'
  let g:unite_source_grep_recursive_opt = ''
endif
" }}}

" Custom filters."{{{
if &rtp=~'unite.vim'
    " call unite#custom_filters('file,buffer,file_rec', ['flexmatcher', 'sorter_default', 'converter_default'])
    call unite#custom_source('file,buffer,file_rec', 'matchers', ['matcher_fuzzy', 'sorter_default', 'converter_default'])
endif
" }}}
" }}}

" Unite-launch settings"{{{
let g:unite_launch_apps = [
            \ 'rake',
            \ 'make',
            \ ]
" }}}

" Unite Ack settings."{{{
let g:unite_source_ack_command="ack --nocolor --nogroup"
" }}}

" VimFiler settings"{{{
let g:vimfiler_edit_action = "tabopen"
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_split_rule = 'botright'

" Like Textmate icons."{{{
let g:vimfiler_tree_leaf_icon = ' '
if &term !~ 'linux'
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_tree_closed_icon = '▸'
else
    let g:vimfiler_tree_opened_icon = '▼'
    let g:vimfiler_tree_closed_icon = '▶'
    " let g:vimfiler_tree_opened_icon = '▶'
    " let g:vimfiler_tree_closed_icon = '◆'
endif
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'
"}}}
"}}}

" TagBar settings"{{{
" Set tagbar to use anjuta-tags instead of ctags
" let g:tagbar_ctags_bin = "anjuta-tags"
let g:tagbar_left = 1
let g:tagbar_width = 25
" Add New languages to tagbar.
" Freebasic {{{
let g:tagbar_type_freebasic = {
            \ 'ctagstype': 'basic',
            \ 'kinds': [
                \ 'c:constants',
                \ 'g:enumerations',
                \ 'f:functions',
                \ 'l:labels',
                \ 't:types',
                \ 'v:variables'
            \]
        \}
"}}}
"}}}

" DumbBuf settings."{{{
let g:dumbbuf_hotkey='<leader>db'
" }}}

" Indent Guides settings."{{{
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
" }}}

" Surrond custom mappings."{{{
let g:surround_custom_mapping = {}
let g:surround_custom_mapping._ = {
            \ 'p':  "<pre> \r </pre>",
            \ 'w':  "%w(\r)",
            \ }
let g:surround_custom_mapping.help = {
            \ 'p':  "> \r <",
            \ }
let g:surround_custom_mapping.ruby = {
            \ '-':  "<% \r %>",
            \ '=':  "<%= \r %>",
            \ '9':  "(\r)",
            \ '5':  "%(\r)",
            \ '%':  "%(\r)",
            \ 'w':  "%w(\r)",
            \ '#':  "#{\r}",
            \ '3':  "#{\r}",
            \ 'e':  "begin \r end",
            \ 'E':  "<<EOS \r EOS",
            \ 'i':  "if \1if\1 \r end",
            \ 'u':  "unless \1unless\1 \r end",
            \ 'c':  "class \1class\1 \r end",
            \ 'm':  "module \1module\1 \r end",
            \ 'd':  "def \1def\1\2args\r..*\r(&)\2 \r end",
            \ 'p':  "\1method\1 do \2args\r..*\r|&| \2\r end",
            \ 'P':  "\1method\1 {\2args\r..*\r|&|\2 \r }",
            \ }
let g:surround_custom_mapping.javascript = {
            \ 'f':  "function(){ \r }"
            \ }
let g:surround_custom_mapping.lua = {
            \ 'f':  "function(){ \r }"
            \ }
let g:surround_custom_mapping.python = {
            \ 'p':  "print(\r)",
            \ '[':  "[\r]",
            \ }
let g:surround_custom_mapping.vim= {
            \'f':  "function! \r endfunction"
            \ }
"}}}

" Yankring settings."{{{
let g:yankring_history_dir=expand('~/.vim')
" }}}

" Rainbow Parenthesis Improved settings"{{{
let g:rainbow_active = 1
let g:rainbow_operators = 1
"}}}

" end plugin options"}}}

" Status line settings."{{{
" Mode function for status line."{{{
fun! s:GetMode()
    let l:mode_l = mode()
    if l:mode_l == 'n'
        let l:mode_l='NORMAL'
    elseif l:mode_l == 'no'
        let l:mode_l='OPERATOR-PENDING'
    elseif l:mode_l == 'i'
        let l:mode_l='INSERT'
    elseif l:mode_l == 'v'
        let l:mode_l='VISUAL (character)'
    elseif l:mode_l == 'V'
        let l:mode_l='VISUAL (line)'
    elseif l:mode_l == ''
        let l:mode_l='VISUAL (block)'
    elseif l:mode_l == 's'
        let l:mode_l='SELECT (character)'
    elseif l:mode_l == 'S'
        let l:mode_l='SELECT (line)'
    elseif l:mode_l == '<C-S>'
        let l:mode_l='SELECT (block)'
    elseif l:mode_l == 'R'
        let l:mode_l='REPLACE'
    elseif l:mode_l == 'Rv'
        let l:mode_l='REPLACE (virtual)'
    elseif l:mode_l == 'c'
        let l:mode_l='COMMAND-LINE'
    elseif l:mode_l == 'cv'
        let l:mode_l='EX (vim)'
    elseif l:mode_l == 'ce'
        let l:mode_l='EX (normal)'
    elseif l:mode_l == 'r'
        let l:mode_l='PROMPT (enter)'
    elseif l:mode_l == 'rm'
        let l:mode_l='PROMPT (more)'
    elseif l:mode_l == 'r?'
        let l:mode_l='PROMPT (confirm)'
    elseif l:mode_l == '!'
        let l:mode_l='SHELL'
    endif
    return l:mode_l
endfun
" }}}

" Reference: https://raw.github.com/niw/profiles/master/.vimrc
" Status line
let &statusline = ''
" let &statusline .= '  %{ l:GetMode() } |'     " Buffer number
let &statusline .= ' %3n '     " Buffer number
let &statusline .= '%m%r%h%w%q' " Modified flag, Readonly flag, Preview flag,
                                " and Quickfix flag
if &rtp=~'fugitive'
    let &statusline .= ' | %<%{fugitive#statusline()} '   " Git branch
endif
let &statusline .= ' | %<%f '   " Filename
let &statusline .= '%='         " Spaces
let &statusline .= '%{" | " . (&fileencoding != "" ? &fileencoding : &encoding) . " | " . &fileformat . " | " . &filetype }'
let &statusline .= ' |%4P'      " Percentage through file of displayed window.
let &statusline .= ' | LN%7l C%3c '  " Line number, Column number, Virtual
                                     " column number
" let &statusline = '%{g:HahHah()}' 

" Show the statusline
set laststatus=2

" Show the cursor position all the time
set ruler		

" Set the fill chars for the statusline
set fillchars+=stl:\ ,stlnc:\ 
" }}}

" Misc settings."{{{
" Set the cursor.
" Reference: http://vim.wikia.com/wiki/Non-blinking_block_cursor_in_a_Linux_console
" if &term =~ 'linux'
    " Make the cursor a solid white non-blinking block.
    " set t_ve+=[?81;0;112c
" endif

" Enable list and set the list chars.
set list
if &term !~ 'linux'
    " set listchars=tab:»\ ,trail:⋅,extends:»,precedes:«
    " set showbreak=↪\ 
    set listchars=tab:»\ ,trail:·,extends:»,precedes:«
    set showbreak=...\ 
else
    " :help digraph to find what characters look best.

    " Works with ter-v16n console font.
    " set listchars=tab:»\ ,trail:∙,extends:»,precedes:«

    " Works with Lat2-Terminus16 console font.
    " set listchars=tab:»\ ,trail:●,extends:»,precedes:«
    " set showbreak=└▶\ 

    set listchars=tab:»\ ,trail:·,extends:»,precedes:«
    set showbreak=...\ 
endif
" Make :help the default keywordprg
set keywordprg=:help

" Don't use input methods.
set iminsert=0
set imsearch=0

" Include the current directory and /usr/include for searching.
set path+=.,,/usr/include

" Only keep a backup when writing.
set nobackup
set writebackup

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Turn on autoindent
set autoindent

" Add extra keywords
set iskeyword+=.

" Show line numbers.
" set number
" Show line number relative to the current line.
set relativenumber

" Make tilde an operator so it can be used with movement (e.g. ~w)
set tildeop

" Set the escape timeout.
set timeout ttimeout timeoutlen=600 ttimeoutlen=0

" Make Visual Block mode able to select past the end of lines.
set virtualedit=block

" Try to keep the cursor on the same column.
set nostartofline

" Show as much of long lines as will fit on the screen not just @'s.
set display+=lastline

" Keep more command line history.
set history=1000

" Make buffers hidden instead of closing them.
set hidden

" Split new windows below or to the right the current one.
set splitbelow
set splitright
" Don't make windows the same size on split or unsplit.
set noequalalways

" Display incomplete commands
set showcmd		

" Enable mouse.
set mouse=a

" Allways show the tabline.
set showtabline=2

" Report all changes.
set report=0

" Don't redraw while performing non-typed actions.
set lazyredraw 

" Set the help window height.
set helpheight=10

" Set preview window height.
set previewheight=8

" Make the command line 2 lines height to avoid "hit enter" prompts.
set cmdheight=2

" }}}

" Showmatch."{{{
" Show matching braces etc.
set showmatch

" Highlight <>.
set matchpairs+=<:>

" Wait half a second for showmatch or until a key is pressed.
set cpoptions-=m
"}}}

" Search options."{{{
" Also switch on highlighting the last used search pattern.
set hlsearch
" Do incremental searching
set incsearch		
"}}}

" Set completion options"{{{
set complete=.,w,b,u,t,i,d,],k,kspell
set completeopt=menuone
"}}}

" Set encryption options"{{{
set cryptmethod=blowfish2
"}}}

" Set tab preferences."{{{
set expandtab
set tabstop=4
set shiftwidth=4
set shiftround
set softtabstop=4
"}}}

" wildmenu options."{{{
" Turn on wild menu and make its tab completion like the shells.
set nowildmenu
set wildmode=list:longest
" }}}

" Undo and backup settings."{{{
" Make vim keep an undo file.
set undofile
let &undodir=expand('~/.vim/tmp')
set undolevels=1000
au BufWritePre /tmp/* setlocal noundofile

" Don't create backups when editing a file.
set nobackup
" }}}

" Line (wrap, textwidth, context, etc...) settings."{{{
" Turn on line wrap.
set wrap

" Set the textwidth to 79 for terminals that are 80.
set textwidth=79

" Set the vertical scrolling context to three lines.
set scrolloff=3
" Set the horizontal scrolling context to three characters.
set sidescrolloff=3
" }}}

" Formatoptions."{{{
set formatexpr&
set formatoptions-=t
set formatoptions-=r
set formatoptions-=o
set formatoptions+=cmM
" }}}

" Set folding options"{{{
set foldmethod=marker
set foldcolumn=3
"}}}

" Conceal level."{{{
if has('conceal')
  set conceallevel=2 concealcursor=iv
endif
"}}}

" End vim options"}}}

" Setup vim colorscheme."{{{

" Set the colorscheme to ir_black.
" colorscheme ir_black
colorscheme zepto_dark

" Try to make the colorscheme look the same in all terminal instances
" including the console at 16 colors.
" CSApprox settings."{{{
if &term!="linux" && &term!="screen.linux"
    " We are in a xterm compatible terminal so we probably have 256 colors.
    set t_Co=256
    let g:CSApprox_ir_black_hook_post = 
                \ ['hi Normal ctermbg=NONE ctermfg=NONE',  
                \ 'hi NonText ctermbg=NONE ctermfg=NONE', 
                \ 'hi FoldColumn cterm=NONE ctermbg=NONE ctermfg=green', 
                \ 'hi LineNr cterm=NONE ctermbg=NONE',
                \ 'hi DiffDelete ctermfg=white',
                \ 'hi DiffChange ctermfg=grey',
                \ 'hi VertSplit ctermfg=darkgrey ctermbg=grey',
                \ 'hi ModeMsg cterm=BOLD ctermfg=darkgrey ctermbg=NONE',
                \ 'hi Comment ctermfg=darkgrey',
                \ 'hi LineNr cterm=NONE ctermfg=darkgrey ctermbg=NONE',
                \ 'hi MatchParen cterm=NONE ctermfg=white ctermbg=cyan',
                \ 'hi Normal ctermfg=NONE ctermbg=NONE',
                \ 'hi Visual ctermfg=white ctermbg=green',
                \ 'hi NonText ctermfg=NONE ctermbg=NONE',
                \ 'hi FoldColumn cterm=NONE ctermfg=green ctermbg=NONE',
                \ 'hi SignColumn cterm=NONE ctermfg=red  ctermbg=NONE',
                \ 'hi Pmenu ctermfg=black ctermbg=grey',
                \ 'hi PmenuSel ctermbg=darkyellow',
                \ 'hi EasyMotionTarget ctermfg=green ctermbg=none',
                \ 'hi EasyMotionShade ctermfg=darkgrey ctermbg=none',
                \ 'hi String ctermfg=green',
                \ 'hi Number ctermfg=magenta',
                \ 'hi Keyword ctermfg=blue',
                \ 'hi PreProc ctermfg=blue',
                \ 'hi Conditional ctermfg=blue',
                \ 'hi Constant ctermfg=cyan',
                \ 'hi Identifier ctermfg=cyan',
                \ 'hi Function ctermfg=darkyellow',
                \ 'hi Type ctermfg=yellow',
                \ 'hi Statement ctermfg=lightblue',
                \ 'hi Special ctermfg=white',
                \ 'hi Delimiter ctermfg=cyan',
                \ 'hi Operator  ctermfg=white',
                \ 'hi Folded ctermfg=lightgrey ctermbg=NONE',
                \ ]
    let g:CSApprox_loaded = 1
else
    " Don't load CSApprox plugin.
    let g:CSApprox_loaded = 1
endif
" }}}

" fbpad colorscheme setup."{{{
if &term=='fbpad-256'
    colorscheme fbpad
endif
"}}}

" End setting up colorscheme"}}}

" Set gui options"{{{

if has('gui_running')
    set guifont=Ricty\ 12
    " set guifont=Droid\ Sans\ Mono\ 10
    " set guifont=DejaVu\ Sans\ Mono\ 10

    " Hide menu and toolbar.
    set guioptions=cMg
    set ch=1		" Make command line one lines high

    set mousehide		" Hide the mouse when typing text

    " Make shift-insert work like in Xterm
    noremap <S-Insert> <MiddleMouse>
    noremap! <S-Insert> <MiddleMouse>
endif
"}}}

set secure
" vim: fdm=marker:fdl=0:fmr={{{,}}}
