" File: .vimrc
" Author: Josiah Gordon
" Last Modified: March 14, 2016
" License:  The MIT License {{{
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
"
" The above copyright notice and this permission notice shall be included in
" all copies or substantial portions of the Software.
"
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
" THE SOFTWARE.
" }}}

" Initialize."{{{
runtime! vimrc.d/vimrc.init
"}}}

" Load plugins."{{{

" Initialize the plugin manager."{{{

" Turn off filetype detection (for plugin manager)
filetype plugin indent off

if has('vim_starting')
    " Initialize neobundle
    set rtp+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle'))
" }}}

" Load neobundle"{{{
NeoBundleFetch 'Shougo/neobundle.vim'
"}}}

" Vim related plugins"{{{
NeoBundle 'kana/vim-submode'
NeoBundle 'kana/vim-arpeggio'
NeoBundle 'kana/vim-smartchr'
NeoBundle 'kana/vim-altercmd'
NeoBundle 'kana/vim-skeleton'
NeoBundle 'kana/vim-gf-user'
NeoBundle 'kana/vim-gf-diff'
NeoBundle 'Shougo/vimproc', {'build' : {'linux': 'make'}}
NeoBundle 'ujihisa/nclipper.vim'
NeoBundle 'tyru/DumbBuf.vim'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'sickill/vim-pasta'
NeoBundle 'vim-scripts/autodate.vim'
NeoBundle 'maxbrunsfeld/vim-yankstack'
NeoBundle 'godlygeek/tabular'
NeoBundle 'airblade/vim-gitgutter'
"}}}

" Unite plugins"{{{
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'ujihisa/unite-locate'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'ujihisa/quicklearn'
NeoBundle 't9md/vim-unite-ack'
NeoBundle 'sgur/unite-qf'
NeoBundle 'h1mesuke/vim-alignta'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'tacroe/unite-mark'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'soh335/unite-qflist'
NeoBundle 'natsumesou/unite-flexmatcher'
NeoBundle "zepto/unite-tmux"
" }}}

" neocomplcache completion."{{{
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'ujihisa/neco-look'
"}}}

" Surround and surround like plugins."{{{
NeoBundle 'tpope/vim-surround'
NeoBundle 't9md/vim-surround_custom_mapping'
" }}}

" File related plugins"{{{
NeoBundle 'Shougo/vimfiler'
"}}}

" Editing related plugins"{{{
NeoBundle 'kana/vim-smartword'
NeoBundle 'kana/vim-grex'
NeoBundle 'thinca/vim-qfreplace'
NeoBundle 'thinca/vim-visualstar'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'vim-scripts/Rainbow-Parentheses-Improved-and2'
NeoBundle 'vim-scripts/camelcasemotion'
"}}}

" Programming related plugins"{{{
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tyru/caw.vim'

" Python related plugins."{{{
NeoBundle 'jimf/vim-pep8-text-width'
"}}}

"}}}

" Git plugin"{{{
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mattn/gist-vim'
"}}}

call neobundle#end()

" Turn filtype settings and syntax back on."{{{
" Turn on filetype detection and other options.
filetype plugin indent on

" Turn on syntax before setting the colors otherwise they will be unset.
syntax on

" Check for and prompt to install uninstalled plugins.
NeoBundleCheck
" }}}

" End plugin loading"}}}

" Keybindings"{{{

" Plugin keybindings."{{{

" Neocomplcache keybindings"{{{
" Check if neocomplcache is loaded.
if &rtp=~'neocomplcache'
    inoremap <expr><C-d>l neocomplcache#toggle_lock()."\<C-h>"
    imap <silent><C-l>     <Plug>(neosnippet_expand_or_jump)
    smap <silent><C-l>     <Plug>(neosnippet_expand_or_jump)
    " smap <silent><C-l>     <Plug>(neocomplcache_snippets_jump)
    "inoremap <silent>G     <Plug>(neocomplcache_snippets_force_expand)
    "inoremap <expr><C-j> neocomplcache#sources#snippets_complete#expandable() ?
    "\ "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "\<CR>"
    " <TAB>: completion.
    " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplcache#close_popup()
    inoremap <expr><C-e>  neocomplcache#cancel_popup()

    " For cursor moving in insert mode(Not recommended)
    inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
    inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
    inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
    inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
endif
"}}}

" Unite keybindings."{{{
" The prefix key.
if &rtp=~'unite'
    nnoremap    [unite]   <nop>
    xnoremap    [unite]   <nop>
    nmap    <leader>u [unite]
    xmap    <leader>u [unite]

    nnoremap <silent> [unite]f  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
    nnoremap <silent> [unite]fb  :<C-u>UniteWithBufferDir -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
    nnoremap <silent> [unite]b  :<C-u>Unite -buffer-name=buffers buffer<CR>
    nnoremap <silent> [unite]r  :<C-u>Unite -buffer-name=register register<CR>
    nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>

    nnoremap  [unite]s  :<C-u>Unite source<CR>

    nnoremap <silent> [unite]h :<C-u>Unite help<CR>

    nnoremap [unite]i :<C-u>Unite neobundle/install:

    nnoremap [unite]a :<C-u>exe "Unite -buffer-name=ack ack:".expand("%:h")<CR>
    nnoremap [unite]a* :<C-u>exe "Unite -buffer-name=ack ack:".expand("%:h").":".escape(expand('<cword>'),' :\')<CR>
    xnoremap <space>a "vy :exe "Unite -buffer-name=ack ack:".expand("%:h").":".escape(@v,' :\')<CR>
    nnoremap [unite]A :<C-u>UniteResume ack<CR>

    nnoremap [unite]g :<C-u>exe "Unite -buffer-name=grep grep:".expand("%:h")<CR>
    nnoremap [unite]G :<C-u>UniteResume grep<CR>

    nnoremap [unite]rm :<C-u>exe "Unite -buffer-name=ref-man ref/man"<CR>

    " nnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux tmux"<CR>
    " nnoremap [unite]tsa :<C-u>exe "Unite -buffer-name=tmux tmux::0:$"<CR>
    " xnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux tmux::'<:'>"<CR>
    nnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux -default-action=send tmux/panes"<CR>
    nnoremap [unite]tsa :<C-u>exe "Unite -buffer-name=tmux -default-action=send tmux/panes::0:$"<CR>
    xnoremap [unite]ts :<C-u>exe "Unite -buffer-name=tmux -default-action=send tmux/panes::'<:'>"<CR>
endif
" }}}

" VimFiler keybindings."{{{
if &rtp=~'vimfiler'
    noremap <leader>vf :VimFiler -buffer-name=explorer -split -winwidth=35 -toggle<CR>
endif
" }}}

" Arpeggio keybindings."{{{
if &rtp=~'vim-arpeggio'
    call arpeggio#map('i', '', 0, 'jk', '<Esc>')
    call arpeggio#map('v', '', 0, 'jk', '<Esc>')
endif
" }}}

" Smartword keybindings"{{{
if &rtp=~'vim-smartword'
    map w  <Plug>(smartword-w)
    map b  <Plug>(smartword-b)
    map e  <Plug>(smartword-e)
    map ge  <Plug>(smartword-ge)
    noremap ,w  w
    noremap ,b  b
    noremap ,e  e
    noremap ,ge  ge
endif
" }}}

" Gundo keybindings."{{{
if &rtp=~'gundo'
    noremap <leader>g :GundoToggle<CR>
endif
" }}}

" TagBar keybindings."{{{
if &rtp=~'tagbar'
    noremap <leader>tb :TagbarToggle<CR>
endif
" }}}

" Yankstack keybindings."{{{
if &rtp=~'vim-yankstack'
    nmap <C-P> <Plug>yankstack_substitute_older_paste
    nmap <C-N> <Plug>yankstack_substitute_newer_paste
endif
" }}}

" IndentGuides keybindings."{{{
if &rtp=~'vim-indent-guides'
    noremap <leader><leader>i :IndentGuidesToggle<CR>
endif
"}}}

" Caw commenter plugin settings."{{{
if &rtp=~'caw.vim'
    map <Plug>(caw:prefix)<Space> <Plug>(caw:i:toggle)
endif
" }}}

" Submodes and submode options."{{{
" Make sure submode is loaded.
if &rtp=~'vim-submode'
    " Textmanip submode"{{{
    " Reference: https://github.com/tsukkee/config/blob/master/vimrc
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>h', '<Plug>(textmanip-move-left)')
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>l', '<Plug>(textmanip-move-right)')
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>j', '<Plug>(textmanip-move-down)')
    call submode#enter_with('textmanip', 'v', 'r', '<C-t>k', '<Plug>(textmanip-move-up)')
    call submode#leave_with('textmanip', 'v', '', '<Esc>')
    call submode#map('textmanip', 'v', 'r', 'h', '<Plug>(textmanip-move-left)')
    call submode#map('textmanip', 'v', 'r', 'l', '<Plug>(textmanip-move-right)')
    call submode#map('textmanip', 'v', 'r', 'j', '<Plug>(textmanip-move-down)')
    call submode#map('textmanip', 'v', 'r', 'k', '<Plug>(textmanip-move-up)')
    "}}}

    " Tab switching submode."{{{
    " Reference: http://www.github.com/choplin vimrc
    " call submode#enter_with('tabnext', 'n', '', '<Tab>', ':<C-u>tabnext<CR>')
    call submode#enter_with('tabnext', 'n', '', 'gt', ':<C-u>tabnext<CR>')
    " call submode#enter_with('tabnext', 'n', '', '<S-Tab>', ':<C-u>tabprevious<CR>')
    call submode#enter_with('tabnext', 'n', '', 'gT', ':<C-u>tabprevious<CR>')
    call submode#leave_with('tabnext', 'n', '', '<Esc>')
    call submode#map('tabnext', 'n', '', 'l', ':<C-u>tabnext<CR>')
    call submode#map('tabnext', 'n', '', 'h', ':<C-u>tabprevious<CR>')
    " }}}

    " Undo/Redo submode."{{{
    call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
    call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
    call submode#leave_with('undo/redo', 'n', '', '<Esc>')
    call submode#map('undo/redo', 'n', '', '-', 'g-')
    call submode#map('undo/redo', 'n', '', '+', 'g+')
    " }}}

    " Window resize submode."{{{
    " Reference: https://github.com/tsukkee/config/blob/master/vimrc
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
    " }}}
endif
" }}}

" end plugin keybindings }}}

"}}}

" Options."{{{

" Plugin options"{{{

" Altercmd."{{{
" Load altercmd.
if &rtp=~'vim-altercmd'
    call altercmd#load()
endif
" }}}

" NeoComplCache settings"{{{
if &rtp=~'neocomplcache'
    " NeoComplCache options."{{{
    " Use neocomplcache#
    let g:neocomplcache_enable_at_startup = 1
    " let g:neocomplcache_disable_auto_complete = 1
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Use camel case completion.
    let g:neocomplcache_enable_camel_case_completion = 1
    " Use underbar completion.
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_auto_delimiter = 1
    " Set minimum syntax keyword length.
    let g:neocomplcache_min_syntax_length = 3
    " Make it auto select the first item.
    let g:neocomplcache_enable_auto_select = 0
    " let g:neocomplcache_ctags_program = 'anjuta-tags'
    let g:neocomplcache_ctags_program = 'ctags'
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate-snippets/snippets/'
    let g:neocomplcache_force_overwrite_completefunc = 1
    " }}}

    " Define dictionary."{{{
    let g:neocomplcache_dictionary_filetype_lists = {
        \ 'default' : '',
        \ }
    " \ 'python'  : $HOME . '/.vim/bundle/pydiction/complete-dict',
    if !exists('g:neocomplcache_dictionary_patterns')
    let g:neocomplcache_dictionary_patterns = {}
    endif
    " works well for the pydiction.vim dictionary file(complete-dict)
    " let g:neocomplcache_dictionary_patterns.python = '\(\h\w*[.(]\?\)\+'
    " }}}

    " Define omni functions dictionary."{{{
    let g:neocomplcache_omni_functions = {
                \ 'javascript' : 'javascriptcomplete#Complete',
                \ 'java'       : 'javacomplete#Complete',
                \ 'go'         : 'gocomplete#Complete',
                \ 'perl'       : 'PerlComplete',
                \ 'ada'        : 'adacomplete#Complete',
                \ }
    "}}}

    " Enable heavy omni completion."{{{
    if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.java = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.perl = '[^. *\t]->\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
    let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.go = '[^. *\t]\.\w*\|\h\w*::'
    "}}}

    " use neocomplcache & clang_complete."{{{

    " add neocomplcache option

    " add clang_complete option
    let g:neocomplcache_clang_use_library = 1
    let g:neocomplcache_clang_library_path='/usr/lib/llvm/'
    " let g:neocomplcache_clang_user_options =
    " \ '-I /usr/include '.
    " \ '-fms-extensions -fgnu-runtime '.
    " \ '-include malloc.h '

    " let g:clang_complete_auto=1
    " let g:clang_use_library = 1
    " let g:clang_library_path='/usr/lib/llvm/'
    " let g:clang_auto_select = 1
    " }}}
endif
"}}}

" Unite settings."{{{
" Start insert.
let g:unite_enable_start_insert = 0
let g:unite_split_rule = "botright"

" For ack."{{{
if executable('ack')
  let g:unite_source_grep_command = 'ack'
  let g:unite_source_grep_default_opts = '--noheading --nocolor -a'
  let g:unite_source_grep_recursive_opt = ''
endif
" }}}

" Custom filters."{{{
if &rtp=~'unite.vim'
    " call unite#custom_filters('file,buffer,file_rec', ['flexmatcher', 'sorter_default', 'converter_default'])
    call unite#custom_source('file,buffer,file_rec', 'matchers', ['matcher_fuzzy', 'sorter_default', 'converter_default'])
endif
" }}}
" }}}

" Unite-launch settings"{{{
let g:unite_launch_apps = [
            \ 'rake',
            \ 'make',
            \ ]
" }}}

" Unite Ack settings."{{{
let g:unite_source_ack_command="ack --nocolor --nogroup"
" }}}

" VimFiler settings"{{{
let g:vimfiler_edit_action = "tabopen"
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_split_rule = 'botright'

" Like Textmate icons."{{{
let g:vimfiler_tree_leaf_icon = ' '
if &term !~ 'linux'
    let g:vimfiler_tree_opened_icon = '▾'
    let g:vimfiler_tree_closed_icon = '▸'
else
    let g:vimfiler_tree_opened_icon = '▼'
    let g:vimfiler_tree_closed_icon = '▶'
    " let g:vimfiler_tree_opened_icon = '▶'
    " let g:vimfiler_tree_closed_icon = '◆'
endif
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'
"}}}
"}}}

" TagBar settings"{{{
" Set tagbar to use anjuta-tags instead of ctags
" let g:tagbar_ctags_bin = "anjuta-tags"
let g:tagbar_left = 1
let g:tagbar_width = 25
" Add New languages to tagbar.
" Freebasic {{{
let g:tagbar_type_freebasic = {
            \ 'ctagstype': 'basic',
            \ 'kinds': [
                \ 'c:constants',
                \ 'g:enumerations',
                \ 'f:functions',
                \ 'l:labels',
                \ 't:types',
                \ 'v:variables'
            \]
        \}
"}}}
"}}}

" DumbBuf settings."{{{
let g:dumbbuf_hotkey='<leader>db'
" }}}

" Indent Guides settings."{{{
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
" }}}

" Surrond custom mappings."{{{
let g:surround_custom_mapping = {}
let g:surround_custom_mapping._ = {
            \ 'p':  "<pre> \r </pre>",
            \ 'w':  "%w(\r)",
            \ }
let g:surround_custom_mapping.help = {
            \ 'p':  "> \r <",
            \ }
let g:surround_custom_mapping.ruby = {
            \ '-':  "<% \r %>",
            \ '=':  "<%= \r %>",
            \ '9':  "(\r)",
            \ '5':  "%(\r)",
            \ '%':  "%(\r)",
            \ 'w':  "%w(\r)",
            \ '#':  "#{\r}",
            \ '3':  "#{\r}",
            \ 'e':  "begin \r end",
            \ 'E':  "<<EOS \r EOS",
            \ 'i':  "if \1if\1 \r end",
            \ 'u':  "unless \1unless\1 \r end",
            \ 'c':  "class \1class\1 \r end",
            \ 'm':  "module \1module\1 \r end",
            \ 'd':  "def \1def\1\2args\r..*\r(&)\2 \r end",
            \ 'p':  "\1method\1 do \2args\r..*\r|&| \2\r end",
            \ 'P':  "\1method\1 {\2args\r..*\r|&|\2 \r }",
            \ }
let g:surround_custom_mapping.javascript = {
            \ 'f':  "function(){ \r }"
            \ }
let g:surround_custom_mapping.lua = {
            \ 'f':  "function(){ \r }"
            \ }
let g:surround_custom_mapping.python = {
            \ 'p':  "print(\r)",
            \ '[':  "[\r]",
            \ }
let g:surround_custom_mapping.vim= {
            \'f':  "function! \r endfunction"
            \ }
"}}}

" Yankring settings."{{{
let g:yankring_history_dir=expand('~/.vim')
" }}}

" Rainbow Parenthesis Improved settings"{{{
let g:rainbow_active = 1
let g:rainbow_operators = 1
"}}}

" end plugin options"}}}

" End vim options"}}}

" Finalize."{{{
runtime! vimrc.d/vimrc.end
"}}}

set secure
" vim: fdm=marker:fdl=0:fmr={{{,}}}
